// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.21.12
// source: definitions.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export interface File {
	/** Should always be "file_reference" */
	type: string;
	id: string;
	name: string;
	size: number;
	hash: string;
}

function createBaseFile(): File {
	return { type: "", id: "", name: "", size: 0, hash: "" };
}

export const File = {
	encode(
		message: File,
		writer: _m0.Writer = _m0.Writer.create(),
	): _m0.Writer {
		if (message.type !== "") {
			writer.uint32(10).string(message.type);
		}
		if (message.id !== "") {
			writer.uint32(18).string(message.id);
		}
		if (message.name !== "") {
			writer.uint32(26).string(message.name);
		}
		if (message.size !== 0) {
			writer.uint32(32).int64(message.size);
		}
		if (message.hash !== "") {
			writer.uint32(42).string(message.hash);
		}
		return writer;
	},

	decode(input: _m0.Reader | Uint8Array, length?: number): File {
		const reader =
			input instanceof _m0.Reader ? input : _m0.Reader.create(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseFile();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1:
					if (tag !== 10) {
						break;
					}

					message.type = reader.string();
					continue;
				case 2:
					if (tag !== 18) {
						break;
					}

					message.id = reader.string();
					continue;
				case 3:
					if (tag !== 26) {
						break;
					}

					message.name = reader.string();
					continue;
				case 4:
					if (tag !== 32) {
						break;
					}

					message.size = longToNumber(reader.int64() as Long);
					continue;
				case 5:
					if (tag !== 42) {
						break;
					}

					message.hash = reader.string();
					continue;
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skipType(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): File {
		return {
			type: isSet(object.type) ? globalThis.String(object.type) : "",
			id: isSet(object.id) ? globalThis.String(object.id) : "",
			name: isSet(object.name) ? globalThis.String(object.name) : "",
			size: isSet(object.size) ? globalThis.Number(object.size) : 0,
			hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
		};
	},

	toJSON(message: File): unknown {
		const obj: any = {};
		if (message.type !== "") {
			obj.type = message.type;
		}
		if (message.id !== "") {
			obj.id = message.id;
		}
		if (message.name !== "") {
			obj.name = message.name;
		}
		if (message.size !== 0) {
			obj.size = Math.round(message.size);
		}
		if (message.hash !== "") {
			obj.hash = message.hash;
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<File>, I>>(base?: I): File {
		return File.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<File>, I>>(object: I): File {
		const message = createBaseFile();
		message.type = object.type ?? "";
		message.id = object.id ?? "";
		message.name = object.name ?? "";
		message.size = object.size ?? 0;
		message.hash = object.hash ?? "";
		return message;
	},
};

type Builtin =
	| Date
	| Function
	| Uint8Array
	| string
	| number
	| boolean
	| undefined;

export type DeepPartial<T> = T extends Builtin
	? T
	: T extends globalThis.Array<infer U>
		? globalThis.Array<DeepPartial<U>>
		: T extends ReadonlyArray<infer U>
			? ReadonlyArray<DeepPartial<U>>
			: T extends {}
				? { [K in keyof T]?: DeepPartial<T[K]> }
				: Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
	? P
	: P & { [K in keyof P]: Exact<P[K], I[K]> } & {
			[K in Exclude<keyof I, KeysOfUnion<P>>]: never;
		};

function longToNumber(long: Long): number {
	if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
		throw new globalThis.Error(
			"Value is larger than Number.MAX_SAFE_INTEGER",
		);
	}
	if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
		throw new globalThis.Error(
			"Value is smaller than Number.MIN_SAFE_INTEGER",
		);
	}
	return long.toNumber();
}

if (_m0.util.Long !== Long) {
	_m0.util.Long = Long as any;
	_m0.configure();
}

function isSet(value: any): boolean {
	return value !== null && value !== undefined;
}
