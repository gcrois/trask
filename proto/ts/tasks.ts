// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.21.12
// source: tasks.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { FileReference } from "./definitions";

export const protobufPackage = "";

export interface CapitalizeRequest {
  text: string;
  file: FileReference | undefined;
}

export interface CapitalizeResponse {
  result: string;
}

export interface TaskRequest {
  capitalize?: CapitalizeRequest | undefined;
}

export interface TaskResponse {
  capitalize?: CapitalizeResponse | undefined;
}

function createBaseCapitalizeRequest(): CapitalizeRequest {
  return { text: "", file: undefined };
}

export const CapitalizeRequest = {
  encode(message: CapitalizeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.file !== undefined) {
      FileReference.encode(message.file, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CapitalizeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCapitalizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.file = FileReference.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CapitalizeRequest {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      file: isSet(object.file) ? FileReference.fromJSON(object.file) : undefined,
    };
  },

  toJSON(message: CapitalizeRequest): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.file !== undefined) {
      obj.file = FileReference.toJSON(message.file);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CapitalizeRequest>, I>>(base?: I): CapitalizeRequest {
    return CapitalizeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CapitalizeRequest>, I>>(object: I): CapitalizeRequest {
    const message = createBaseCapitalizeRequest();
    message.text = object.text ?? "";
    message.file = (object.file !== undefined && object.file !== null)
      ? FileReference.fromPartial(object.file)
      : undefined;
    return message;
  },
};

function createBaseCapitalizeResponse(): CapitalizeResponse {
  return { result: "" };
}

export const CapitalizeResponse = {
  encode(message: CapitalizeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.result !== "") {
      writer.uint32(10).string(message.result);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CapitalizeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCapitalizeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CapitalizeResponse {
    return { result: isSet(object.result) ? globalThis.String(object.result) : "" };
  },

  toJSON(message: CapitalizeResponse): unknown {
    const obj: any = {};
    if (message.result !== "") {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CapitalizeResponse>, I>>(base?: I): CapitalizeResponse {
    return CapitalizeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CapitalizeResponse>, I>>(object: I): CapitalizeResponse {
    const message = createBaseCapitalizeResponse();
    message.result = object.result ?? "";
    return message;
  },
};

function createBaseTaskRequest(): TaskRequest {
  return { capitalize: undefined };
}

export const TaskRequest = {
  encode(message: TaskRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.capitalize !== undefined) {
      CapitalizeRequest.encode(message.capitalize, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TaskRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.capitalize = CapitalizeRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskRequest {
    return { capitalize: isSet(object.capitalize) ? CapitalizeRequest.fromJSON(object.capitalize) : undefined };
  },

  toJSON(message: TaskRequest): unknown {
    const obj: any = {};
    if (message.capitalize !== undefined) {
      obj.capitalize = CapitalizeRequest.toJSON(message.capitalize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskRequest>, I>>(base?: I): TaskRequest {
    return TaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskRequest>, I>>(object: I): TaskRequest {
    const message = createBaseTaskRequest();
    message.capitalize = (object.capitalize !== undefined && object.capitalize !== null)
      ? CapitalizeRequest.fromPartial(object.capitalize)
      : undefined;
    return message;
  },
};

function createBaseTaskResponse(): TaskResponse {
  return { capitalize: undefined };
}

export const TaskResponse = {
  encode(message: TaskResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.capitalize !== undefined) {
      CapitalizeResponse.encode(message.capitalize, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TaskResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.capitalize = CapitalizeResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskResponse {
    return { capitalize: isSet(object.capitalize) ? CapitalizeResponse.fromJSON(object.capitalize) : undefined };
  },

  toJSON(message: TaskResponse): unknown {
    const obj: any = {};
    if (message.capitalize !== undefined) {
      obj.capitalize = CapitalizeResponse.toJSON(message.capitalize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskResponse>, I>>(base?: I): TaskResponse {
    return TaskResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskResponse>, I>>(object: I): TaskResponse {
    const message = createBaseTaskResponse();
    message.capitalize = (object.capitalize !== undefined && object.capitalize !== null)
      ? CapitalizeResponse.fromPartial(object.capitalize)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
