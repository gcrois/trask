# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: tasks.proto
# plugin: python-betterproto
from dataclasses import dataclass

import betterproto


@dataclass
class TaskRequest(betterproto.Message):
    """
    Define a generic task request that can handle multiple types of tasks
    """

    capitalize: "CapitalizeTextRequest" = betterproto.message_field(1, group="task")
    reverse: "ReverseTextRequest" = betterproto.message_field(2, group="task")
    multiply: "MultiplyIntegerRequest" = betterproto.message_field(3, group="task")


@dataclass
class TaskResponse(betterproto.Message):
    """
    Define a generic task response that can handle multiple types of task
    responses
    """

    capitalize: "CapitalizeTextResponse" = betterproto.message_field(
        1, group="response"
    )
    reverse: "ReverseTextResponse" = betterproto.message_field(2, group="response")
    multiply: "MultiplyIntegerResponse" = betterproto.message_field(3, group="response")


@dataclass
class CapitalizeTextRequest(betterproto.Message):
    """Request and response definitions for capitalizing text"""

    input: str = betterproto.string_field(1)


@dataclass
class CapitalizeTextResponse(betterproto.Message):
    result: str = betterproto.string_field(1)


@dataclass
class ReverseTextRequest(betterproto.Message):
    """Request and response definitions for reversing text"""

    input: str = betterproto.string_field(1)


@dataclass
class ReverseTextResponse(betterproto.Message):
    result: str = betterproto.string_field(1)


@dataclass
class MultiplyIntegerRequest(betterproto.Message):
    """Request and response definitions for multiplying integers"""

    a: int = betterproto.int32_field(1)
    b: int = betterproto.int32_field(2)


@dataclass
class MultiplyIntegerResponse(betterproto.Message):
    result: int = betterproto.int32_field(1)
